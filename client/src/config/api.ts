// Runtime-config aware API client
type RuntimeConfig = {
  API_BASE?: string;
};

// Default config (fallback)
export const API_CONFIG = {
  BASE_URL: (() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ vite.config.ts
    const serverUrl = (globalThis as any).__CLOUDPUB_SERVER_URL__ || import.meta.env.CLOUDPUB_SERVER_URL;
    console.log('üîß CLOUDPUB_SERVER_URL –∏–∑ .env:', serverUrl);
    if (serverUrl) {
      return `${serverUrl}/api`;
    }
    return import.meta.env.VITE_API_BASE_URL || '/api';
  })(),
  TIMEOUT: 15000,
  RETRY_ATTEMPTS: 3,
  RETRY_DELAY: 1000
};

// Load runtime config (fetch /config.json) and apply to API_CONFIG
export const loadRuntimeConfig = async (): Promise<void> => {
  const tried: string[] = [];
  const setBase = (base: string) => {
    API_CONFIG.BASE_URL = base;
    console.info('‚úÖ Runtime config applied, API_BASE =', base);
  }

  const tryFetch = async (url: string, timeout = 3000) => {
    tried.push(url);
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeout);
      
      const r = await fetch(url, { 
        cache: 'no-store',
        signal: controller.signal,
        headers: { 'Accept': 'application/json' }
      });
      
      clearTimeout(timeoutId);
      return r;
    } catch (e) {
      return null;
    }
  }

  try {
    const proto = window.location.protocol;
    const host = window.location.hostname;

    // 1) –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π runtime config —Å —Å–µ—Ä–≤–µ—Ä–∞ (
    // —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º URL –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ env)
    const globalServerUrl = (globalThis as any).__CLOUDPUB_SERVER_URL__ || (import.meta as any)?.env?.CLOUDPUB_SERVER_URL;
    if (globalServerUrl) {
      const absoluteConfigUrl = `${globalServerUrl}/config.json`;
      console.log('üåê –ü—Ä–æ–±—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π config.json —Å —Å–µ—Ä–≤–µ—Ä–∞:', absoluteConfigUrl);
      const abs = await tryFetch(absoluteConfigUrl, 5000);
      if (abs && abs.ok) {
        const data: RuntimeConfig = await abs.json();
        if (data && data.API_BASE) {
          console.log('‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π runtime config –ø—Ä–∏–º–µ–Ω–µ–Ω:', data);
          setBase(data.API_BASE);
          return;
        }
      }
      // –ï—Å–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    }

    // 2) –õ–æ–∫–∞–ª—å–Ω—ã–π runtime config —Ñ–∞–π–ª (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä—è–¥–æ–º —Å SPA)
    let r = await tryFetch('/config.json');
    if (r && r.ok) {
      const data: RuntimeConfig = await r.json();
      if (data && data.API_BASE) { 
        console.log('üìÑ –ù–∞–π–¥–µ–Ω runtime config:', data.API_BASE);
        console.log('üìÑ Runtime –¥–∞–Ω–Ω—ã–µ:', data);
        setBase(data.API_BASE); 
        return; 
      }
    }

    // 3) Same-origin health check
    r = await tryFetch('/api/health');
    if (r && r.ok) { 
      console.log('üîó Same-origin API –¥–æ—Å—Ç—É–ø–µ–Ω');
      setBase('/api'); 
      return; 
    }

    // 4) –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    r = await tryFetch(`${proto}//${host}:3001/api/health`);
    if (r && r.ok) { 
      console.log('üíª –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω');
      setBase(`${proto}//${host}:3001/api`); 
      return; 
    }

    // 5) Cloudpub –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const cloudpubPatterns = [
      // –ü—Ä—è–º–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ client -> server
      host.replace(/^client/, 'server'),
      host.replace(/-client/, '-server'),
      host.replace(/client/g, 'server'),
      // –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ server URL
      host.replace(/^server/, 'server'), // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      host.replace(/-server/, '-server'), // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      host
    ];

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è)
    for (let attempt = 1; attempt <= 3; attempt++) {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3 –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...`);
      
      for (const serverHost of cloudpubPatterns) {
        if (serverHost !== host) {
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${proto}//${serverHost}/api/health`);
          r = await tryFetch(`${proto}//${serverHost}/api/health`, 8000);
          if (r && r.ok) { 
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä: ${serverHost}`);
            setBase(`${proto}//${serverHost}/api`); 
            return; 
          }
        }
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
      if (attempt < 3) {
        console.log(`‚è≥ –ñ–¥–µ–º ${attempt * 2}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, attempt * 2000));
      }
    }

    // 6) –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ –æ–±—â–∏–º –¥–æ–º–µ–Ω–Ω—ã–º —á–∞—Å—Ç—è–º
    try {
      const parts = host.split('.');
      if (parts.length > 2) {
        const serverGuess = ['server', ...parts.slice(1)].join('.');
        r = await tryFetch(`${proto}//${serverGuess}/api/health`);
        if (r && r.ok) { setBase(`${proto}//${serverGuess}/api`); return; }
      }
    } catch {}

    console.warn('‚ùå Runtime config: no server found, tried:', tried.join(', '));
    console.warn('Current host:', host);
    console.warn('Using fallback API_BASE:', API_CONFIG.BASE_URL);
  } catch (e) {
    console.warn('Could not load runtime config, using defaults', e);
  }
};

export const getApiUrl = (endpoint: string): string => {
  return `${API_CONFIG.BASE_URL}${endpoint}`;
};

/**
 * Returns the API origin (without the /api suffix) so clients can build absolute URLs
 * to server-served static assets like /gallery.html or /uploads/*
 */
export const getApiOrigin = (): string => {
  const base = API_CONFIG.BASE_URL;
  // If base contains /api at the end, strip it
  if (base.endsWith('/api')) return base.slice(0, -4);
  if (base.endsWith('/api/')) return base.slice(0, -5);
  return base;
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîß API Configuration (initial):', {
  BASE_URL: API_CONFIG.BASE_URL,
  hostname: window.location.hostname
});