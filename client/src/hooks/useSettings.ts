import { useState, useEffect, useCallback } from 'react';
import { settingsApiService, type UserSettings } from '../services/settingsApi';
import { showError, showSuccess } from '../components/ToastManager';

interface UseSettingsReturn {
  settings: UserSettings['settings'] | null;
  isLoading: boolean;
  error: string | null;
  updateSetting: (key: keyof UserSettings['settings'], value: any) => Promise<void>;
  updateSettings: (newSettings: Partial<UserSettings['settings']>) => Promise<void>;
  resetSettings: () => Promise<void>;
  exportSettings: () => Promise<void>;
  importSettings: (file: File) => Promise<void>;
  refreshSettings: () => Promise<void>;
}

export const useSettings = (): UseSettingsReturn => {
  const [settings, setSettings] = useState<UserSettings['settings'] | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = useCallback(async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      console.log('‚öôÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const userSettings = await settingsApiService.getUserSettings();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userSettings);
      
      setSettings(userSettings.settings);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const defaultSettings = {
        language: 'auto' as const,
        autoLock: false,
        hasPincode: false,
        pincode: null,
        autoCleanup: true,
        cacheLimit: 100,
        notifications: true,
        vibration: true,
        sounds: true,
        photosPerPage: 15,
        autoLoadPhotos: true,
        photoQuality: 'high' as const,
        debugMode: false,
        analytics: true
      };
      
      console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
      setSettings(defaultSettings);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const updateSetting = useCallback(async (key: keyof UserSettings['settings'], value: any) => {
    try {
      console.log(`‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É ${key}:`, value);
      const updatedSettings = await settingsApiService.updateSetting(key, value);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedSettings);
      
      setSettings(updatedSettings.settings);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      applySettingToApp(key, value);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
      showError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', err);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSettings = useCallback(async (newSettings: Partial<UserSettings['settings']>) => {
    try {
      console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', newSettings);
      const updatedSettings = await settingsApiService.updateUserSettings(newSettings);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', updatedSettings);
      
      setSettings(updatedSettings.settings);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      Object.entries(newSettings).forEach(([key, value]) => {
        applySettingToApp(key as keyof UserSettings['settings'], value);
      });
      
      showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      showError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    }
  }, []);

  // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const resetSettings = useCallback(async () => {
    try {
      console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
      const defaultSettings = await settingsApiService.resetSettings();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã:', defaultSettings);
      
      setSettings(defaultSettings.settings);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      Object.entries(defaultSettings.settings).forEach(([key, value]) => {
        applySettingToApp(key as keyof UserSettings['settings'], value);
      });
      
      showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      showError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    }
  }, []);

  // –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const exportSettings = useCallback(async () => {
    try {
      await settingsApiService.exportSettings();
      showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      showError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    }
  }, []);

  // –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const importSettings = useCallback(async (file: File) => {
    try {
      const importedSettings = await settingsApiService.importSettings(file);
      setSettings(importedSettings.settings);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      Object.entries(importedSettings.settings).forEach(([key, value]) => {
        applySettingToApp(key as keyof UserSettings['settings'], value);
      });
      
      showSuccess('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      showError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', err);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const refreshSettings = useCallback(async () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    await loadSettings();
  }, [loadSettings]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
  const applySettingToApp = useCallback((key: keyof UserSettings['settings'], value: any) => {
    switch (key) {
      case 'language':
        applyLanguage(value);
        break;
      case 'vibration':
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ TelegramAPI
        localStorage.setItem('app_vibration_enabled', value.toString());
        break;
      case 'notifications':
        localStorage.setItem('app_notifications_enabled', value.toString());
        break;
      case 'sounds':
        localStorage.setItem('app_sounds_enabled', value.toString());
        break;
      case 'photosPerPage':
        localStorage.setItem('app_photos_per_page', value.toString());
        break;
      case 'autoLoadPhotos':
        localStorage.setItem('app_auto_load_photos', value.toString());
        break;
      case 'photoQuality':
        localStorage.setItem('app_photo_quality', value);
        break;
      case 'debugMode':
        localStorage.setItem('app_debug_mode', value.toString());
        break;
    }
  }, []);



  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
  const applyLanguage = useCallback((language: string) => {
    if (language !== 'auto') {
      localStorage.setItem('user_language_setting', language);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
      window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang: language } }));
    } else {
      localStorage.removeItem('user_language_setting');
      // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
      window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang: 'auto' } }));
    }
  }, []);



  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const applyAllSettings = useCallback((settingsData: UserSettings['settings']) => {
    try {
      Object.entries(settingsData).forEach(([key, value]) => {
        applySettingToApp(key as keyof UserSettings['settings'], value);
      });
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }, [applySettingToApp]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadSettings();
  }, [loadSettings]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑–≤–Ω–µ
  useEffect(() => {
    const handler = () => {
      refreshSettings();
    };
    window.addEventListener('refreshSettings', handler as EventListener);
    return () => window.removeEventListener('refreshSettings', handler as EventListener);
  }, [refreshSettings]);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (settings) {
      applyAllSettings(settings);
    }
  }, [settings, applyAllSettings]);

  return {
    settings,
    isLoading,
    error,
    updateSetting,
    updateSettings,
    resetSettings,
    exportSettings,
    importSettings,
    refreshSettings
  };
};