import { TelegramAPI } from './telegram-api-core';

interface SwipeHandler {
  id: string;
  onSwipeLeft?: () => void;
  onSwipeRight?: () => void;
  onSwipeUp?: () => void;
  onSwipeDown?: () => void;
  priority: number;
  enabled: boolean;
}

interface SwipeConfig {
  minDistance: number;
  maxTime: number;
  preventVerticalSwipes: boolean;
}

class SwipeManager {
  private handlers: SwipeHandler[] = [];
  private config: SwipeConfig = {
    minDistance: 50,
    maxTime: 300,
    preventVerticalSwipes: true
  };
  
  private touchStartX = 0;
  private touchStartY = 0;
  private touchStartTime = 0;
  private isInitialized = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–≤–∞–π–ø–æ–≤
   */
  init() {
    if (this.isInitialized) return;
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –≤ Telegram –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è WebApp
    if (TelegramAPI.isAvailable()) {
      const disabled = TelegramAPI.disableVerticalSwipes();
      console.log(`üö´ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã ${disabled ? '–æ—Ç–∫–ª—é—á–µ–Ω—ã' : '–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å'}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è CSS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    document.body.classList.add('swipe-navigation-active');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ touch —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
    document.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
    
    this.isInitialized = true;
    console.log('üëÜ SwipeManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–æ–≤
   */
  register(
    id: string, 
    handlers: {
      onSwipeLeft?: () => void;
      onSwipeRight?: () => void;
      onSwipeUp?: () => void;
      onSwipeDown?: () => void;
    },
    priority: number = 0
  ) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    this.unregister(id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
    this.handlers.push({
      id,
      ...handlers,
      priority,
      enabled: true
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    this.handlers.sort((a, b) => b.priority - a.priority);
    
    console.log(`üëÜ SwipeManager: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω '${id}' (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority})`);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–∞–π–ø–æ–≤
   */
  unregister(id: string) {
    const initialLength = this.handlers.length;
    this.handlers = this.handlers.filter(h => h.id !== id);
    
    if (this.handlers.length !== initialLength) {
      console.log(`üëÜ SwipeManager: —É–¥–∞–ª–µ–Ω '${id}'`);
    }
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  setEnabled(id: string, enabled: boolean) {
    const handler = this.handlers.find(h => h.id === id);
    if (handler) {
      handler.enabled = enabled;
      console.log(`üëÜ SwipeManager: '${id}' ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–∞—Å–∞–Ω–∏—è
   */
  private handleTouchStart(e: TouchEvent) {
    if (e.touches.length !== 1) return;
    
    const touch = e.touches[0];
    this.touchStartX = touch.clientX;
    this.touchStartY = touch.clientY;
    this.touchStartTime = Date.now();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏—è
   */
  private handleTouchEnd(e: TouchEvent) {
    if (e.changedTouches.length !== 1) return;
    
    const touch = e.changedTouches[0];
    const endX = touch.clientX;
    const endY = touch.clientY;
    const endTime = Date.now();
    
    const deltaX = endX - this.touchStartX;
    const deltaY = endY - this.touchStartY;
    const deltaTime = endTime - this.touchStartTime;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    if (deltaTime > this.config.maxTime) return;
    
    const absX = Math.abs(deltaX);
    const absY = Math.abs(deltaY);
    
    if (absX < this.config.minDistance && absY < this.config.minDistance) return;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–π–ø–∞
    let direction: 'left' | 'right' | 'up' | 'down';
    
    if (absX > absY) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
      direction = deltaX > 0 ? 'right' : 'left';
    } else {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
      direction = deltaY > 0 ? 'down' : 'up';
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      if (this.config.preventVerticalSwipes) {
        e.preventDefault();
        return;
      }
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    this.handleSwipe(direction, e);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞
   */
  private handleSwipe(direction: 'left' | 'right' | 'up' | 'down', e: TouchEvent) {
    for (const handler of this.handlers) {
      if (!handler.enabled) continue;
      
      let swipeHandler: (() => void) | undefined;
      
      switch (direction) {
        case 'left':
          swipeHandler = handler.onSwipeLeft;
          break;
        case 'right':
          swipeHandler = handler.onSwipeRight;
          break;
        case 'up':
          swipeHandler = handler.onSwipeUp;
          break;
        case 'down':
          swipeHandler = handler.onSwipeDown;
          break;
      }
      
      if (swipeHandler) {
        console.log(`üëÜ SwipeManager: –æ–±—Ä–∞–±–æ—Ç–∞–Ω ${direction} —Å–≤–∞–π–ø —á–µ—Ä–µ–∑ '${handler.id}'`);
        e.preventDefault();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        window.dispatchEvent(new CustomEvent('swipe-indicator', {
          detail: { direction }
        }));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        TelegramAPI.vibrate('selection');
        
        swipeHandler();
        return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
      }
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–≤–∞–π–ø–æ–≤
   */
  configure(config: Partial<SwipeConfig>) {
    this.config = { ...this.config, ...config };
    console.log('üëÜ SwipeManager: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', this.config);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  getActiveHandlers(): string[] {
    return this.handlers
      .filter(h => h.enabled)
      .map(h => `${h.id} (${h.priority})`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
   */
  clear() {
    this.handlers = [];
    console.log('üëÜ SwipeManager: –æ—á–∏—â–µ–Ω—ã –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');
  }

  /**
   * –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
   */
  destroy() {
    if (!this.isInitialized) return;
    
    document.removeEventListener('touchstart', this.handleTouchStart.bind(this));
    document.removeEventListener('touchend', this.handleTouchEnd.bind(this));
    
    // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã –≤ Telegram
    if (TelegramAPI.isAvailable()) {
      TelegramAPI.enableVerticalSwipes();
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    document.body.classList.remove('swipe-navigation-active');
    
    this.clear();
    this.isInitialized = false;
    console.log('üëÜ SwipeManager –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }
}

export const swipeManager = new SwipeManager();