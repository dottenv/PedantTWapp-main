/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤
 */

interface LocaleEntry {
  key: string;
  value: string;
  file: string;
  line: number;
}

interface LocaleData {
  [key: string]: string;
}

export class AutoLocalizer {
  private static instance: AutoLocalizer;
  private locales: Map<string, LocaleData> = new Map();
  private currentLang = 'ru';

  static getInstance(): AutoLocalizer {
    if (!AutoLocalizer.instance) {
      AutoLocalizer.instance = new AutoLocalizer();
    }
    return AutoLocalizer.instance;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  detectLanguage(): string {
    // 1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const savedLang = localStorage.getItem('user_language');
    if (savedLang) return savedLang;

    // 2. Telegram WebApp –¥–∞–Ω–Ω—ã–µ
    const tgUser = (window as any).Telegram?.WebApp?.initDataUnsafe?.user;
    if (tgUser?.language_code) {
      return tgUser.language_code.split('-')[0]; // en-US -> en
    }

    // 3. –ë—Ä–∞—É–∑–µ—Ä
    return navigator.language.split('-')[0] || 'ru';
  }

  // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
  async scanAndExtract(): Promise<LocaleEntry[]> {
    const entries: LocaleEntry[] = [];
    
    // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    const textRegex = /['"`]([–∞-—è—ë\s\d\.,!?:;-]+)['"`]/gi;
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ src/components/
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä
    const mockFileContent = `
      <div className="card-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
      <div className="user-name">–ó–∞–∫–∞–∑ #{order.id}</div>
      <button>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑</button>
    `;

    let match;
    let lineNumber = 1;
    
    while ((match = textRegex.exec(mockFileContent)) !== null) {
      const text = match[1].trim();
      if (text.length > 1) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
        entries.push({
          key: this.generateKey(text),
          value: text,
          file: 'example.tsx',
          line: lineNumber
        });
      }
    }

    return entries;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
  private generateKey(text: string): string {
    return text
      .toLowerCase()
      .replace(/[^–∞-—è—ë\w\s]/g, '')
      .replace(/\s+/g, '_')
      .substring(0, 30);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤ –ª–æ–∫–∞–ª–µ–π
  generateLocaleFiles(entries: LocaleEntry[]): { [lang: string]: LocaleData } {
    const locales: { [lang: string]: LocaleData } = {
      ru: {},
      en: {},
      uk: {},
      kz: {}
    };

    entries.forEach(entry => {
      locales.ru[entry.key] = entry.value;
      locales.en[entry.key] = `[EN] ${entry.value}`; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
      locales.uk[entry.key] = `[UK] ${entry.value}`;
      locales.kz[entry.key] = `[KZ] ${entry.value}`;
    });

    return locales;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª–∏
  async loadLocale(lang: string): Promise<void> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞
      const mockLocale: LocaleData = {
        'nastroyki': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'zakaz': '–ó–∞–∫–∞–∑',
        'dobavit_zakaz': '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'
      };
      
      this.locales.set(lang, mockLocale);
      this.currentLang = lang;
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å ${lang}:`, error);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
  t(key: string, fallback?: string): string {
    const locale = this.locales.get(this.currentLang);
    return locale?.[key] || fallback || key;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
  async init(): Promise<void> {
    const detectedLang = this.detectLanguage();
    await this.loadLocale(detectedLang);
    
    console.log(`üåê –õ–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${detectedLang}`);
  }

  // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
  async setLanguage(lang: string): Promise<void> {
    localStorage.setItem('user_language', lang);
    await this.loadLocale(lang);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    window.dispatchEvent(new CustomEvent('languageChanged', { detail: lang }));
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
export const t = (key: string, fallback?: string): string => {
  return AutoLocalizer.getInstance().t(key, fallback);
};

// –•—É–∫ –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
export const useLocalization = () => {
  const localizer = AutoLocalizer.getInstance();
  
  return {
    t: localizer.t.bind(localizer),
    currentLang: localizer.currentLang,
    setLanguage: localizer.setLanguage.bind(localizer)
  };
};