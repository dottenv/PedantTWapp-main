/**
 * –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ WebApp
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç—ã
 */

import { LocaleScanner } from './locale-scanner';
import { TelegramAPI } from './telegram-api-core';

export class StartupLocalizer {
  private scanner = new LocaleScanner();
  private isProcessed = false;

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async autoRun(): Promise<void> {
    try {
      console.log('üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–æ–∫–∞–ª–∏
      const ruLocale = localStorage.getItem('app_locales_ru');
      const enLocale = localStorage.getItem('app_locales_en');
      
      if (!ruLocale || !enLocale || Object.keys(JSON.parse(ruLocale || '{}')).length === 0) {
        console.log('üìù –õ–æ–∫–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∑–∞–ø—É—Å–∫–∞—é –º–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
        await this.runMassScanning();
      } else {
        console.log('‚úÖ –õ–æ–∫–∞–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      }

      this.isProcessed = true;

    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private detectUserLanguage(): string {
    // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const saved = localStorage.getItem('app_language');
    if (saved) return saved;

    // 2. Telegram
    const tgUser = TelegramAPI.getUser();
    if (tgUser?.language_code) {
      return tgUser.language_code.split('-')[0];
    }

    // 3. –ë—Ä–∞—É–∑–µ—Ä
    return navigator.language.split('-')[0] || 'ru';
  }

  // –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  private async runMassScanning(): Promise<void> {
    try {
      const { massLocalizer } = await import('./mass-localizer');
      await massLocalizer.scanAllComponents();
      console.log('‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ç–æ—Ä
  shouldRun(): boolean {
    const ruLocale = localStorage.getItem('app_locales_ru');
    return !ruLocale || Object.keys(JSON.parse(ruLocale || '{}')).length === 0;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const startupLocalizer = new StartupLocalizer();