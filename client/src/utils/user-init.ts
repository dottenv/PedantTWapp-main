import { TelegramAPI } from './telegram-api-core';
import { apiService } from '../services/api';
import { telegramLogger } from '../components/TelegramLogger';

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export const setupAutoReload = () => {
  if (TelegramAPI.tg) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const checkRegistrationStatus = async () => {
      try {
        const user = getTelegramUser();
        if (!user) return;
        
        const response = await apiService.request(`/users/${user.id}`);
        const userData = await response.json();
        
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ employee, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
        const currentStatus = localStorage.getItem('userRegistrationStatus');
        if (currentStatus === 'unregistered' && userData.registrationStatus === 'employee') {
          telegramLogger.success('üéâ –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ localStorage
          localStorage.setItem('userRegistrationStatus', userData.registrationStatus);
          
          // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ localStorage
          localStorage.setItem('userRegistrationStatus', userData.registrationStatus);
        }
      } catch (error) {
        // –ú–æ–ª—á–∞–ª–∏–≤–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(checkRegistrationStatus, 5000);
  }
};

export interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

export const createTestUser = (): TelegramUser => ({
  id: 999999999,
  first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
  last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  username: 'testuser',
  language_code: 'ru'
});

export const getTelegramUser = (): TelegramUser | null => {
  if (TelegramAPI.tg?.initDataUnsafe?.user) {
    return TelegramAPI.tg.initDataUnsafe.user;
  }
  return null;
};

export const initializeUser = async (isTelegramAvailable: boolean): Promise<any> => {
  try {
    const userToCreate = isTelegramAvailable 
      ? getTelegramUser() || createTestUser()
      : createTestUser();

    telegramLogger.info(`üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${userToCreate.first_name}`);
    
    const result: any = await apiService.initUser(userToCreate);
    telegramLogger.success(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${result.user?.id}`);
    if (result.session) {
      telegramLogger.success(`üîë –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${result.session?.id}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ/—Å–µ—Å—Å–∏–∏ –≤ localStorage
    try {
      localStorage.setItem('telegram_user', JSON.stringify(result.user));
      if (result.session) {
        localStorage.setItem('app_session', JSON.stringify({ userId: result.user.id, sessionId: result.session.id }));
      } else {
        localStorage.setItem('app_session', JSON.stringify({ userId: result.user.id }));
      }
      telegramLogger.info('üîê –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ localStorage:', e);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ localStorage
    localStorage.setItem('userRegistrationStatus', result.user.registrationStatus);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    setupAutoReload();
    
    return result;
  } catch (error: any) {
    telegramLogger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    throw error;
  }
};