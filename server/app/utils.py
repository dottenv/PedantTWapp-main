import re
from typing import Any, Dict, List, Optional
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ValidationUtils:
    @staticmethod
    def validate_required(data: Dict[str, Any], required_fields: List[str]) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        missing_fields = [field for field in required_fields if field not in data or data[field] is None]
        if missing_fields:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")

    @staticmethod
    def validate_order_number(order_number: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ XXX-XXXXXX"""
        pattern = r'^\d{3}-\d{5}$'
        return bool(re.match(pattern, order_number))

    @staticmethod
    def extract_service_number(order_number: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        if '-' in order_number:
            return order_number.split('-')[0]
        return None

    @staticmethod
    def validate_telegram_user(user_data: Dict[str, Any]) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        if not user_data.get('id'):
            raise ValueError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
        
        if not isinstance(user_data['id'], int):
            raise ValueError('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')


class LoggerUtils:
    @staticmethod
    def log_info(message: str, data: Any = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if data:
            logger.info(f"{message}: {data}")
        else:
            logger.info(message)

    @staticmethod
    def log_success(message: str, data: Any = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        if data:
            logger.info(f"‚úÖ {message}: {data}")
        else:
            logger.info(f"‚úÖ {message}")

    @staticmethod
    def log_error(message: str, error: Exception = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        if error:
            logger.error(f"‚ùå {message}: {error}")
        else:
            logger.error(f"‚ùå {message}")

    @staticmethod
    def log_debug(message: str, data: Any = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if data:
            logger.debug(f"üîç {message}: {data}")
        else:
            logger.debug(f"üîç {message}")

    @staticmethod
    def log_request(request_data: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logger.info(f"üì• {request_data.get('method', 'UNKNOWN')} {request_data.get('url', 'UNKNOWN')}")

    @staticmethod
    def log_health_check(request_data: Dict[str, Any]) -> Dict[str, Any]:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return {
            "status": "ok",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "request": request_data
        }

    @staticmethod
    def log_user_init(user_data: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üë§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data.get('id', 'unknown')}")

    @staticmethod
    def log_user_init_success(user_id: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


class TelegramUtils:
    @staticmethod
    async def upload_order_photos(photos: List[Dict[str, Any]], uploads_path: str) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –≤ Telegram (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –µ—Å—Ç—å
        return photos


class CorsUtils:
    @staticmethod
    def get_cors_config() -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS"""
        return {
            "origin": "*",
            "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allowedHeaders": ["*"],
            "credentials": False
        }


class SessionService:
    def __init__(self, db):
        self.db = db

    async def create_session(self, user_id: int, user_agent: str, ip_address: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = f"sess-{user_id}-{int(datetime.utcnow().timestamp())}"
        session_data = {
            "id": session_id,
            "userId": user_id,
            "userAgent": user_agent,
            "ipAddress": ip_address,
            "isActive": True,
            "createdAt": datetime.utcnow().isoformat() + "Z",
            "lastActivity": datetime.utcnow().isoformat() + "Z"
        }
        
        await self.db.insert("sessions", session_data)
        return session_data

    async def get_session(self, session_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ ID"""
        sessions = await self.db.find("sessions", id=session_id)
        return sessions[0] if sessions else None

    async def update_session_activity(self, session_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        session = await self.get_session(session_id)
        if session:
            session["lastActivity"] = datetime.utcnow().isoformat() + "Z"
            await self.db.upsert("sessions", session, key_field="id")

    async def track_hiring_activity(self, user_id: int, activity_type: str, data: Dict[str, Any]):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–π–º–∞"""
        activity_data = {
            "userId": user_id,
            "activityType": activity_type,
            "data": data,
            "timestamp": datetime.utcnow().isoformat() + "Z"
        }
        await self.db.insert("hiringActivities", activity_data)


class OrderNumberService:
    def __init__(self, db):
        self.db = db

    async def is_order_number_unique(self, order_number: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        orders = await self.db.find("orders", orderNumber=order_number)
        return len(orders) == 0

    async def generate_next_order_number(self, service_number: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        orders = await self.db.list("orders")
        service_orders = [
            order for order in orders 
            if order.get("orderNumber", "").startswith(f"{service_number}-")
        ]
        
        max_number = 0
        for order in service_orders:
            order_number = order.get("orderNumber", "")
            if "-" in order_number:
                try:
                    num = int(order_number.split("-")[1])
                    max_number = max(max_number, num)
                except ValueError:
                    continue
        
        next_number = max_number + 1
        return f"{service_number}-{next_number:05d}"


class ClientLogger:
    def __init__(self):
        self.clients = []

    def add_client(self, response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Server-Sent Events"""
        self.clients.append(response)

    def remove_client(self, response):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if response in self.clients:
            self.clients.remove(response)

    async def send_to_all(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        for client in self.clients[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            try:
                await client.write(f"data: {message}\n\n")
            except:
                self.remove_client(client)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
client_logger = ClientLogger()
