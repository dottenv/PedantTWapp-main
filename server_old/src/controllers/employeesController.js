import { LoggerUtils } from '../utils/loggerUtils.js';

export class EmployeesController {
  constructor(employeeService, userService) {
    this.employeeService = employeeService;
    this.userService = userService;
  }

  async getEmployeesByService(req, res) {
    const { serviceId } = req.params;
    LoggerUtils.logInfo(`[EMPLOYEES_API] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–∞: ${serviceId}`);
    try {
      const employees = await this.employeeService.getEmployeesByService(serviceId);
      LoggerUtils.logInfo(`[EMPLOYEES_API] –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const employeesWithUserInfo = [];
      for (const employee of employees) {
        const user = await this.userService.getUserById(employee.userId);
        
        employeesWithUserInfo.push({
          ...employee.toJSON(),
          user: user ? user.toJSON() : null
        });
      }
      
      LoggerUtils.logSuccess(`[EMPLOYEES_API] –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ ${serviceId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã`);
      res.json(employeesWithUserInfo);
    } catch (error) {
      LoggerUtils.logError('[EMPLOYEES_API] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–∞', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async getEmployeesByUser(req, res) {
    try {
      const { userId } = req.params;
      const employees = await this.employeeService.getEmployeesByUser(userId);
      res.json(employees);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async addEmployee(req, res) {
    try {
      const employeeData = req.body;
      const employee = await this.employeeService.addEmployee(employeeData);
      
      res.status(201).json({
        success: true,
        message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω',
        employee: employee
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
      res.status(400).json({ 
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' 
      });
    }
  }

  async updateEmployee(req, res) {
    try {
      const { id } = req.params;
      const updateData = req.body;
      const employee = await this.employeeService.updateEmployee(id, updateData);
      
      if (!employee) {
        return res.status(404).json({ 
          success: false,
          error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
      }
      
      res.json({
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        employee: employee
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
      res.status(500).json({ 
        success: false,
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
  }

  async removeEmployee(req, res) {
    try {
      const { id } = req.params;
      const removed = await this.employeeService.removeEmployee(id);
      
      if (!removed) {
        return res.status(404).json({ error: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      res.json({
        success: true,
        message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async checkPermission(req, res) {
    try {
      const { userId, serviceId, permission } = req.params;
      const hasPermission = await this.employeeService.hasPermission(userId, serviceId, permission);
      
      res.json({
        hasPermission: hasPermission
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async hireEmployee(req, res) {
    const { userId, serviceId, ownerId } = req.body;
    LoggerUtils.logInfo(`[HIRE] üöÄ –ù–∞—á–∞–ª–æ –Ω–∞–π–º–∞: userId=${userId}, serviceId=${serviceId}, ownerId=${ownerId}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
      LoggerUtils.logInfo('[HIRE] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞...');
      const owner = await this.userService.getUserById(ownerId);
      LoggerUtils.logInfo(`[HIRE] üë§ –í–ª–∞–¥–µ–ª–µ—Ü –Ω–∞–π–¥–µ–Ω: ${!!owner}, —Å–µ—Ä–≤–∏—Å—ã: ${JSON.stringify(owner?.ownedServices)}`);
      
      if (!owner || !owner.ownedServices.includes(parseInt(serviceId))) {
        LoggerUtils.logError('[HIRE] ‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–π–º');
        return res.status(403).json({ 
          success: false,
          error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–π–º –≤ —ç—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å' 
        });
      }
      LoggerUtils.logSuccess('[HIRE] ‚úÖ –ü—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
      LoggerUtils.logInfo('[HIRE] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...');
      const currentEmployees = await this.employeeService.getEmployeesByService(serviceId);
      LoggerUtils.logInfo(`[HIRE] üë• –¢–µ–∫—É—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ ${serviceId}: ${currentEmployees.length}`);
      currentEmployees.forEach(emp => {
        LoggerUtils.logInfo(`[HIRE] - ID: ${emp.id}, userId: ${emp.userId}, role: ${emp.role}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–Ω—è—Ç –ª–∏ —É–∂–µ
      const existingEmployee = currentEmployees.find(emp => emp.userId === parseInt(userId));
      if (existingEmployee) {
        LoggerUtils.logInfo('[HIRE] ‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –Ω–∞–Ω—è—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å');
        return res.json({
          success: true,
          message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –Ω–∞–Ω—è—Ç',
          employee: existingEmployee.toJSON()
        });
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const employeeData = {
        serviceId: parseInt(serviceId),
        userId: parseInt(userId),
        role: 'employee',
        permissions: ['create_orders', 'view_orders', 'edit_orders'],
        status: 'active',
        invitedBy: parseInt(ownerId)
      };
      
      LoggerUtils.logInfo('[HIRE] üíæ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î...', employeeData);
      const employee = await this.employeeService.addEmployee(employeeData);
      LoggerUtils.logSuccess(`[HIRE] ‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: ${employee.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
      LoggerUtils.logInfo('[HIRE] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î...');
      const verifyEmployees = await this.employeeService.getEmployeesByService(serviceId);
      const addedEmployee = verifyEmployees.find(emp => emp.userId === parseInt(userId));
      if (addedEmployee) {
        LoggerUtils.logSuccess(`[HIRE] ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –≤ –ë–î —Å ID: ${addedEmployee.id}`);
      } else {
        LoggerUtils.logError('[HIRE] ‚ùå –û–®–ò–ë–ö–ê: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      LoggerUtils.logInfo('[HIRE] üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      await this.userService.updateUser(userId, {
        registrationStatus: 'employee',
        activeServiceId: parseInt(serviceId)
      });
      LoggerUtils.logSuccess('[HIRE] ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      LoggerUtils.logSuccess(`[HIRE] üéâ –ù–∞–π–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: userId=${userId} -> serviceId=${serviceId}`);
      res.json({
        success: true,
        message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–Ω—è—Ç',
        employee: employee.toJSON()
      });
    } catch (error) {
      LoggerUtils.logError('[HIRE] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–π–º–∞:', error);
      LoggerUtils.logError(`[HIRE] Stack trace: ${error.stack}`);
      res.status(500).json({ 
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –Ω–∞–π–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞' 
      });
    }
  }
}