export class OrdersController {
  constructor(orderService, employeeService = null) {
    this.orderService = orderService;
    this.employeeService = employeeService;
  }

  async getAllOrders(req, res) {
    console.log('üìã GET /api/orders - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤');
    try {
      const orders = await this.orderService.getAllOrders();
      console.log('‚úÖ –ó–∞–∫–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', orders.length);
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', orders);
      res.json(orders);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async getOrderById(req, res) {
    try {
      const { id } = req.params;
      const order = await this.orderService.getOrderById(id);
      
      if (!order) {
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      res.json(order);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async createOrder(req, res) {
    console.log('üìù POST /api/orders - –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞');
    console.log('üì• –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', req.body);
    console.log('üì∑ –§–∞–π–ª—ã:', req.files ? req.files.length : 0);
    try {
      const orderData = req.body;
      
      if (!orderData.created_by_id) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç created_by_id');
        return res.status(400).json({ error: 'Telegram ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }
      
      if (!orderData.orderNumber) {
        console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç orderNumber');
        return res.status(400).json({ error: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω serviceId)
      if (orderData.serviceId && this.employeeService) {
        const hasPermission = await this.employeeService.hasPermission(
          orderData.created_by_id, 
          orderData.serviceId, 
          'create_orders'
        );
        
        if (!hasPermission) {
          return res.status(403).json({ 
            error: '–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–∏—Å–µ' 
          });
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ç–æ (multer)
      const photos = [];
      if (req.files && req.files.length > 0) {
        console.log(`üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${req.files.length} —Ñ–æ—Ç–æ`);
        
        const fs = await import('fs/promises');
        const path = await import('path');
        const { fileURLToPath } = await import('url');
        
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        const uploadsDir = path.join(__dirname, '../../data/uploads');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try {
          await fs.access(uploadsDir);
        } catch {
          await fs.mkdir(uploadsDir, { recursive: true });
        }
        
        for (const file of req.files) {
          const timestamp = Date.now();
          const ext = path.extname(file.originalname);
          const filename = `${timestamp}_${Math.random().toString(36).substring(7)}${ext}`;
          const filepath = path.join(uploadsDir, filename);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
          await fs.writeFile(filepath, file.buffer);
          
          photos.push({
            filename: file.originalname,
            savedAs: filename,
            size: file.size,
            mimetype: file.mimetype,
            path: `/uploads/${filename}`
          });
        }
      }
      
      const orderWithPhotos = {
        ...orderData,
        photos: photos,
        photos_count: photos.length
      };
      
      const order = await this.orderService.createOrder(orderWithPhotos);
      
      const response = {
        success: true,
        message: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
        order: order
      };
      
      console.log('[SUCCESS] Order created successfully:', response);
      res.status(201).json(response);
    } catch (error) {
      console.error('[ERROR] Order creation failed:', error.message || error);
      res.status(500).json({ 
        success: false,
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
  }

  async updateOrder(req, res) {
    console.log('[ORDER] PUT /api/orders/:id - request to update order');
    console.log('[ORDER] Order ID:', req.params.id);
    console.log('[ORDER] Update data:', req.body);
    console.log('[ORDER] Files:', req.files ? req.files.length : 0);
    
    try {
      const { id } = req.params;
      const updateData = req.body;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
      const photos = [];
      if (req.files && req.files.length > 0) {
        console.log(`[ORDER] Processing ${req.files.length} photos`);
        
        const fs = await import('fs/promises');
        const path = await import('path');
        const { fileURLToPath } = await import('url');
        
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        const uploadsDir = path.join(__dirname, '../../data/uploads');
        
        try {
          await fs.access(uploadsDir);
        } catch {
          await fs.mkdir(uploadsDir, { recursive: true });
        }
        
        for (const file of req.files) {
          const timestamp = Date.now();
          const ext = path.extname(file.originalname);
          const filename = `${timestamp}_${Math.random().toString(36).substring(7)}${ext}`;
          const filepath = path.join(uploadsDir, filename);
          
          await fs.writeFile(filepath, file.buffer);
          
          photos.push({
            filename: file.originalname,
            savedAs: filename,
            size: file.size,
            mimetype: file.mimetype,
            path: `/uploads/${filename}`
          });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞
        const currentOrder = await this.orderService.getOrderById(id);
        const existingPhotos = currentOrder?.photos || [];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        updateData.photos = [...existingPhotos, ...photos];
        updateData.photos_count = updateData.photos.length;
        
        console.log(`[ORDER] –î–æ–±–∞–≤–ª—è–µ–º ${photos.length} –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –∫ ${existingPhotos.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º`);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        console.log('[ORDER] –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è');
      }
      
      const order = await this.orderService.updateOrder(id, updateData);
      
      if (!order) {
        return res.status(404).json({ 
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
      }
      
      const photoMessage = photos.length > 0 ? ` (–¥–æ–±–∞–≤–ª–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ)` : '';
      const response = {
        success: true,
        message: `–ó–∞–∫–∞–∑ #${order.orderNumber || order.id} –æ–±–Ω–æ–≤–ª–µ–Ω${photoMessage}`,
        order: order
      };
      
      console.log('[SUCCESS] Order updated successfully:', response);
      res.json(response);
    } catch (error) {
      console.error('[ERROR] Order update failed:', error);
      res.status(500).json({ 
        success: false,
        error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      });
    }
  }

  async deleteOrder(req, res) {
    try {
      const { id } = req.params;
      const deleted = await this.orderService.deleteOrder(id);
      
      if (!deleted) {
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      res.json({
        success: true,
        message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async getNextOrderNumber(req, res) {
    try {
      const { serviceNumber } = req.params;
      
      if (!serviceNumber) {
        return res.status(400).json({ error: '–ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }
      
      const nextNumber = await this.orderService.generateNextOrderNumber(serviceNumber);
      res.json(nextNumber);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞' });
    }
  }
}