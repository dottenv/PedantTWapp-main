import { Order } from '../models/Order.js';
import { TelegramUtils } from '../utils/telegramUtils.js';
import { ValidationUtils } from '../utils/validationUtils.js';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export class OrderService {
  constructor(db, userService = null, serviceService = null, orderNumberService = null) {
    this.db = db;
    this.userService = userService;
    this.serviceService = serviceService;
    this.orderNumberService = orderNumberService;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getUserNameById(telegramId) {
    if (!this.userService || !telegramId) {
      return null;
    }
    
    try {
      const user = await this.userService.getUserById(telegramId);
      return user ? user.name : null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  async getAllOrders() {
    try {
      await this.db.read();
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', this.db.data.orders.length);
      
      const orders = [];
      for (const orderData of this.db.data.orders) {
        const order = Order.fromJSON(orderData);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å Telegram ID, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è
        if (order.created_by_id) {
          const userName = await this.getUserNameById(order.created_by_id);
          if (userName) {
            order.created_by = userName;
          }
        }
        
        orders.push(order);
      }
      
      return orders;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
      throw error;
    }
  }

  async getOrderById(id) {
    await this.db.read();
    const orderData = this.db.data.orders.find(o => o.id === parseInt(id));
    
    if (!orderData) return null;
    
    const order = Order.fromJSON(orderData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ Telegram ID
    if (order.created_by_id) {
      const userName = await this.getUserNameById(order.created_by_id);
      if (userName) {
        order.created_by = userName;
      }
    }
    
    return order;
  }

  async createOrder(orderData) {
    try {
      await this.db.read();
      
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:', orderData);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ë–î
      const orderId = Date.now();
      
      // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º orderNumber –∏–∑ —Ñ–æ—Ä–º—ã
      const orderNumber = orderData.orderNumber;
      
      if (!orderNumber || !orderNumber.trim()) {
        throw new Error('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
      if (!ValidationUtils.validateOrderNumber(orderNumber)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: XXX-XXXXXX (–Ω–∞–ø—Ä–∏–º–µ—Ä: 667-00001)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
      if (this.orderNumberService) {
        const isUnique = await this.orderNumberService.isOrderNumberUnique(orderNumber);
        if (!isUnique) {
          throw new Error(`–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º ${orderNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } else {
        const existingOrder = this.db.data.orders.find(o => o.orderNumber === orderNumber);
        if (existingOrder) {
          throw new Error(`–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º ${orderNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
      const serviceNumber = ValidationUtils.extractServiceNumber(orderNumber);
      const localOrderNumber = orderNumber.split('-')[1] ? parseInt(orderNumber.split('-')[1]) : null;
      
      // –ü–æ–ª—É—á–∞–µ–º serviceId –ø–æ –Ω–æ–º–µ—Ä—É —Å–µ—Ä–≤–∏—Å–∞
      let serviceId = orderData.serviceId || null;
      if (!serviceId && this.serviceService && serviceNumber) {
        const service = await this.serviceService.getServiceByNumber(serviceNumber);
        serviceId = service ? service.id : null;
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å
      let processedPhotos = orderData.photos || [];
      if (processedPhotos.length > 0) {
        try {
          const uploadsPath = path.join(__dirname, '../../data/uploads');
          console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Telegram...');
          processedPhotos = await TelegramUtils.uploadOrderPhotos(processedPhotos, uploadsPath);
          console.log('‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Telegram');
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram:', error.message);
        }
      }
      
      const order = new Order({
        ...orderData,
        id: orderId,
        serviceId: serviceId,
        orderNumber: orderNumber,
        localOrderNumber: localOrderNumber,
        photos: processedPhotos,
        photos_count: processedPhotos.length
      });

      this.db.data.orders.push(order.toJSON());
      await this.db.write();
      
      console.log('‚ú® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', order.id, '(–Ω–æ–º–µ—Ä:', orderNumber, ')');
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
      
      return order;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  }

  async updateOrder(id, updateData) {
    await this.db.read();
    
    const index = this.db.data.orders.findIndex(o => o.id === parseInt(id));
    if (index === -1) return null;

    const existingOrder = this.db.data.orders[index];
    const updatedOrder = new Order({
      ...existingOrder,
      ...updateData,
      id: parseInt(id),
      updated_at: new Date().toISOString(),
      photos_count: updateData.photos ? updateData.photos.length : existingOrder.photos_count
    });

    this.db.data.orders[index] = updatedOrder.toJSON();
    await this.db.write();
    
    return updatedOrder;
  }

  async deleteOrder(id) {
    await this.db.read();
    
    const index = this.db.data.orders.findIndex(o => o.id === parseInt(id));
    if (index === -1) return false;

    this.db.data.orders.splice(index, 1);
    await this.db.write();
    
    return true;
  }

  async generateNextOrderNumber(serviceNumber) {
    try {
      await this.db.read();
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
      const serviceOrders = this.db.data.orders.filter(order => {
        if (!order.orderNumber) return false;
        const orderServiceNumber = ValidationUtils.extractServiceNumber(order.orderNumber);
        return orderServiceNumber === serviceNumber;
      });
      
      // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
      let maxNumber = 0;
      for (const order of serviceOrders) {
        const parts = order.orderNumber.split('-');
        if (parts.length === 2) {
          const orderNum = parseInt(parts[1]);
          if (!isNaN(orderNum) && orderNum > maxNumber) {
            maxNumber = orderNum;
          }
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä
      const nextNumber = maxNumber + 1;
      const paddedNumber = nextNumber.toString().padStart(5, '0'); // 00001, 00002, etc.
      
      return `${serviceNumber}-${paddedNumber}`;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞:', error);
      throw error;
    }
  }
}