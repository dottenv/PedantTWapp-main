import fs from 'fs';
import path from 'path';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
 */
export class TelegramUtils {
  static BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  static TELEGRAM_API_URL = `https://api.telegram.org/bot${TelegramUtils.BOT_TOKEN}`;

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id
   */
  static async uploadPhotoToTelegram(filePath, chatId = null) {
    if (!TelegramUtils.BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      const FormData = (await import('form-data')).default;
      const fetch = (await import('node-fetch')).default;
      
      const form = new FormData();
      form.append('photo', fs.createReadStream(filePath));
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å chatId, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º sendPhoto –±–µ–∑ chat_id
      const endpoint = chatId ? 'sendPhoto' : 'sendPhoto';
      const url = `${TelegramUtils.TELEGRAM_API_URL}/${endpoint}`;
      
      if (chatId) {
        form.append('chat_id', chatId);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π ID)
        form.append('chat_id', '665852999'); // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      }

      const response = await fetch(url, {
        method: 'POST',
        body: form
      });

      const result = await response.json();
      
      if (!result.ok) {
        throw new Error(`Telegram API error: ${result.description}`);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
      const photos = result.result.photo;
      const largestPhoto = photos[photos.length - 1];
      
      return {
        file_id: largestPhoto.file_id,
        file_unique_id: largestPhoto.file_unique_id,
        width: largestPhoto.width,
        height: largestPhoto.height,
        file_size: largestPhoto.file_size
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç HTTPS —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –ø–æ file_id
   */
  static async getPhotoUrl(fileId) {
    if (!TelegramUtils.BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    try {
      const fetch = (await import('node-fetch')).default;
      
      const response = await fetch(`${TelegramUtils.TELEGRAM_API_URL}/getFile?file_id=${fileId}`);
      const result = await response.json();
      
      if (!result.ok) {
        throw new Error(`Telegram API error: ${result.description}`);
      }

      const filePath = result.result.file_path;
      return `https://api.telegram.org/file/bot${TelegramUtils.BOT_TOKEN}/${filePath}`;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–æ—Ç–æ:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞ –≤ Telegram
   */
  static async uploadOrderPhotos(photos, uploadsPath) {
    const telegramPhotos = [];
    
    for (const photo of photos) {
      try {
        const filePath = path.join(uploadsPath, photo.savedAs);
        
        if (!fs.existsSync(filePath)) {
          console.warn(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
          continue;
        }

        const telegramPhoto = await TelegramUtils.uploadPhotoToTelegram(filePath);
        
        telegramPhotos.push({
          ...photo,
          telegram_file_id: telegramPhoto.file_id,
          telegram_file_unique_id: telegramPhoto.file_unique_id,
          telegram_width: telegramPhoto.width,
          telegram_height: telegramPhoto.height,
          telegram_file_size: telegramPhoto.file_size
        });

        console.log(`‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Telegram: ${photo.filename} -> ${telegramPhoto.file_id}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ${photo.filename}:`, error);
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ Telegram –¥–∞–Ω–Ω—ã—Ö
        telegramPhotos.push(photo);
      }
    }
    
    return telegramPhotos;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ WebApp
   */
  static async sendReloadNotification(userId, message) {
    if (!TelegramUtils.BOT_TOKEN) {
      console.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return;
    }

    try {
      const fetch = (await import('node-fetch')).default;
      
      const response = await fetch(`${TelegramUtils.TELEGRAM_API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          chat_id: userId,
          text: message,
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: process.env.WEBAPP_URL || 'https://your-webapp-url.com' }
              }
            ]]
          }
        })
      });

      const result = await response.json();
      
      if (!result.ok) {
        console.error(`Telegram API error: ${result.description}`);
        return;
      }

      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const sendReloadNotification = TelegramUtils.sendReloadNotification.bind(TelegramUtils);